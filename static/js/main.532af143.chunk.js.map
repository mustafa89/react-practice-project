{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","src","alt","CardList","robots","map","users","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","scrollbarWidth","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","response","json","filterRobots","filter","item","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+JAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,wCCQCQ,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,sBAAKC,UAAU,uDAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WACzD,gCACK,6BAAKL,IACN,4BAAIC,WCeLK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAIhB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OACI,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZM,EAAOG,GAAGR,UCCxBS,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKT,UAAU,MAAf,SACA,uBACIA,UAAU,2BACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCWPI,EAVA,SAACC,GACZ,OAGI,aAFA,CAEA,OAAKC,MAAO,CAAEC,UAAW,SAAUC,eAAgB,IAAKC,OAAQ,SAAhE,SACKJ,EAAMK,YCKJC,E,kDAjBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAOG,KAAKJ,MAAMC,SAAW,gDAA0BG,KAAKX,MAAMK,a,GAd9CQ,IAAMC,WCgDnBC,E,kDA3CX,aAAe,IAAD,8BACV,gBAcJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAd1C,EAAKb,MAAQ,CACTjB,OAAQ,GACR4B,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACL7C,MAAK,SAAA8C,GAAQ,OAAIA,EAASC,UAC1B/C,MAAK,SAACgB,GACH,EAAKoB,SAAS,CAAEtB,OAAQE,S,+BAOtB,IAAD,OACCgC,EAAeb,KAAKJ,MAAMjB,OAAOmC,QAAO,SAACC,GAC3C,OAAOA,EAAK3C,KAAK4C,cAAcC,SAAS,EAAKrB,MAAMW,YAAYS,kBAEnE,OAAQhB,KAAKJ,MAAMjB,OAAOuC,OAElB,sBAAK3C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKK,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQkC,WANlC,iD,GAzBMX,IAAMC,W,MCExBgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,8BACE,cAAC,EAAD,QAIJC,SAASC,eAAe,SAM1B7D,K","file":"static/js/main.532af143.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n   \n    return (\n        <div className=\"bg-light-green dib pa3 ma2 tc br2 shadow-5 grow bw3 \">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\n            <div>\n                 <h2>{name}</h2>\n                <p>{email}</p>   \n            </div>    \n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js'\n\nconst CardList = ({ robots }) => {\n    //  if(true) {           //--> simulate error\n    //      throw new Error(\"Error Occured\")\n    //  } \n    return (\n        <div>\n            {\n                robots.map((users, i) => {\n                    return (\n                        <Card\n                        key={robots[i].id}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                    );\n                })\n        }\n        </div>\n    );\n};\nexport default CardList;\n\n//id={robots[0].id}\n    //name={robots[0].name}\n    //email={robots[0].email}","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n        <input \n            className='tc pa3 ma2 grow shadow-5' \n            type='search' \n            placeholder='Search Robots'\n            onChange={searchChange}>\n        </input>\n        </div>\n    )\n}\nexport default SearchBox;","import React from \"react\"\n\n\n// --> props.children is a property that all components readity inherit.\n// --> Even if no props are passed to the component it will still contain ClassList\n// --> as a child component. Then what we do is, we wrap the child component of Scroll\n// --> in CSS (in JSX format) to allow it to overflow the card list on scroll.\n\n// --> Scroll is a div that containes the CardList div. And we make the cardlist to scroll inside\n// --> this Scroll div.\nconst Scroll = (props) => {\n    return(\n        // --> Below we add CSS in JSX syntax. For JSX we must convert the CSS to camelCase\n        // --> in css : overflow-y in JSX it becomes overflowY\n        <div style={{ overflowY: 'scroll', scrollbarWidth: '0', height: '800px'}}> \n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    };\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        \n        return this.state.hasError ? <h1>Found an Error</h1> : this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList.js'\nimport SearchBox from '../components/SearchBox.js'\nimport Scroll from '../components/Scroll.js'\nimport ErrorBoundary from '../components/ErrorBoundary.js'\n\nclass App extends React.Component { // --> A component that has state defined inside it is called a smart component. searchBox and Cardlist are dumb components as they have no state.\n    constructor() {   // --> We initialize a class with this countructor. equivalent to __init__ dunder in python.\n        super()       // --> This is required when ever we extend a class. Causes the constructor of the parent class to run first.\n        this.state = {\n            robots: [], // --> empty array, will be filled in by DidMount\n            searchField: ''\n        }\n    }\n    // --> Special react built-in function. Executes Before render() function.\n    componentDidMount() {  // --> instead of getting robot users from a file we get them from an API now\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then((users) => {\n            this.setState({ robots: users })\n        })\n    }\n    onSearchChange = (event) => {       // --> Always create self defined function inside a react class like this\n        this.setState({ searchField: event.target.value })  // --> We reset the state from empty to search field value\n\n    }\n    render() {\n        const filterRobots = this.state.robots.filter((item) => {  // --> we Filter the items for the search field\n            return item.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n        })\n        return !this.state.robots.length ? // --> Add loading to page untill data is fetched. If robots.length is zero return loading, else components.\n            <h1> LOADING...</h1> : (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary> \n                            <CardList robots={filterRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n                // we pass the values of filtered items here to robots\n                // --> SearchBox and CardList are components.\n                // --> If anything in the Cardlist fails Errorboundary will catch it and it won't cause the whole app to break.\n                // --> only the component will fail. The h1 tag will only be visible in production mode.\n            );\n        }\n    }\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';  //--> for websites; react-native for mobile\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App.js'\nimport { removeProperties } from '@babel/types';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App/>\n    </div>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// --> Properties(PROPS) are simply things that come out of an applications state\n// --> A parent feeds state in to a child component and as soon as the child \n// --> receives the state it's a property. The child can never change the PROP\n// --> props are static dictated by state."],"sourceRoot":""}